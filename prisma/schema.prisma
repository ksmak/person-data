generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  name       String?
  isActive   Boolean     @default(true)
  isAdmin    Boolean     @default(false)
  email      String      @unique
  password   String
  firstName  String?
  lastName   String?
  middleName String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  balance    Int         @default(0)
  queries    Query[]
  tokens     API_Token[]
}

enum QueryStateType {
  WAITING
  COMPLETED
}

model Db {
  id      String   @id @default(cuid())
  name    String
  persons Person[]
}

model Person {
  id                 String    @id @default(cuid())
  Db                 Db?       @relation(fields: [dbId], references: [id])
  dbId               String?
  firstName          String?
  lastName           String?
  middleName         String?
  birthDate          String?
  iin                String?
  phone              String?
  photo              String?
  region             String?
  district           String?
  locality           String?
  street             String?
  building           String?
  apartment          String?
  extendedPersonData Json?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
}

model Query {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  body      String
  state     QueryStateType @default(WAITING)
  count     Int            @default(0)
  createdAt DateTime?      @default(now())
}

model Subscription {
  id           String @id @default(cuid())
  title        String
  queriesCount Int
  price        Int
}

model API_Token {
  id        String    @id @default(cuid())
  token     String    @unique
  createdAt DateTime? @default(now())
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
}
