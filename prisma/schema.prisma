generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  isActive      Boolean       @default(true)
  email         String        @unique
  emailVerified DateTime?
  password      String
  firstName     String?
  lastName      String?
  middleName    String?
  expiredPwd    DateTime?
  subs          Subscription? @relation(fields: [subsId], references: [id], onDelete: SetNull)
  subsId        String?
  queries       Query[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum QueryStateType {
  WAITING
  SUCCESS
  ERROR
}

model Db {
  id      String   @id @default(cuid())
  name    String
  persons Person[]
}

model Person {
  id                 String    @id @default(cuid())
  Db                 Db?       @relation(fields: [dbId], references: [id])
  dbId               String?
  firstName          String?
  lastName           String?
  middleName         String?
  iin                String?
  phone              String?
  photo              String?
  region             String?
  district           String?
  locality           String?
  street             String?
  building           String?
  apartment          String?
  extendedPersonData Json?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
}

model Query {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  body      String
  result    String?
  count     Int?
  state     QueryStateType @default(WAITING)
  createdAt DateTime?      @default(now())
}

model Subscription {
  id                  String  @id @default(cuid())
  title               String
  maxQueriesDay       Int
  maxQueriesMonth     Int
  maxQueriesTotal     Int
  usageTimeLimit      Int
  accessQueries       Boolean @default(true)
  accessImportData    Boolean @default(false)
  accessMonitoring    Boolean @default(false)
  accessUsers         Boolean @default(false)
  accessSubscriptions Boolean @default(false)
  user                User[]
}
