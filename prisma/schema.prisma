// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QueryStateType {
  WAITING
  SUCCESS
  ERROR
}

model User {
  id         String        @id @default(cuid())
  isActive   Boolean       @default(true)
  login      String        @unique
  password   String
  firstName  String?
  lastName   String?
  middleName String?
  expiredPwd DateTime?
  createdAt  DateTime?     @default(now())
  updatedAt  DateTime?     @updatedAt
  queries    Query[]
  subs       Subscription? @relation(fields: [subsId], references: [id], onDelete: SetNull)
  subsId     String?
}

model Person {
  id         String    @id @default(cuid())
  firstName  String?
  lastName   String?
  middleName String?
  iin        String?
  phone      String?
  photo      String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  addresses  Address[]
}

model Address {
  id        String  @id @default(cuid())
  person    Person  @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId  String
  region    String?
  district  String?
  locality  String?
  street    String?
  building  String?
  apartment Int?
}

model Query {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  body      String
  count     Int
  state     QueryStateType @default(WAITING)
  createdAt DateTime?      @default(now())
}

model Subscription {
  id               String  @id @default(cuid())
  title            String
  maxQueriesDay    Int
  maxQueriesMonth  Int
  maxQueriesTotal  Int
  usageTimeLimit   Int
  accessImportData Boolean
  accessUsers      Boolean
  accessMonitoring Boolean
  user             User[]
}
